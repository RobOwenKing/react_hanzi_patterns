[{"/home/robert/Documents/coding/react_hanzi_patterns/src/index.js":"1","/home/robert/Documents/coding/react_hanzi_patterns/src/App.js":"2","/home/robert/Documents/coding/react_hanzi_patterns/src/reportWebVitals.js":"3","/home/robert/Documents/coding/react_hanzi_patterns/src/components/search_bar.jsx":"4","/home/robert/Documents/coding/react_hanzi_patterns/src/components/large_character.jsx":"5","/home/robert/Documents/coding/react_hanzi_patterns/src/components/character_details.jsx":"6","/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/pinyinify.js":"7","/home/robert/Documents/coding/react_hanzi_patterns/src/components/small_character.jsx":"8","/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/ordinal_suffix.js":"9","/home/robert/Documents/coding/react_hanzi_patterns/src/components/etymology.jsx":"10","/home/robert/Documents/coding/react_hanzi_patterns/src/components/search_history.jsx":"11","/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/data.js":"12"},{"size":500,"mtime":1610908191754,"results":"13","hashOfConfig":"14"},{"size":2764,"mtime":1618910138069,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1610906507055,"results":"16","hashOfConfig":"14"},{"size":355,"mtime":1613402732424,"results":"17","hashOfConfig":"14"},{"size":254,"mtime":1619097028264,"results":"18","hashOfConfig":"14"},{"size":2458,"mtime":1619098936358,"results":"19","hashOfConfig":"14"},{"size":5693,"mtime":1612204065200,"results":"20","hashOfConfig":"14"},{"size":718,"mtime":1619017788326,"results":"21","hashOfConfig":"14"},{"size":391,"mtime":1612376045662,"results":"22","hashOfConfig":"14"},{"size":1862,"mtime":1618910466979,"results":"23","hashOfConfig":"14"},{"size":814,"mtime":1613509485188,"results":"24","hashOfConfig":"14"},{"size":1803,"mtime":1619096997864,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8o1ej3",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/robert/Documents/coding/react_hanzi_patterns/src/index.js",[],["53","54"],"/home/robert/Documents/coding/react_hanzi_patterns/src/App.js",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/reportWebVitals.js",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/search_bar.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/large_character.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/character_details.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/pinyinify.js",["55","56","57","58","59","60","61","62"],"/**\n * @file Converts pinyin tone numbers to tone marks.\n * @author Kevin K. Yang <yangkevi@usc.edu>\n * @copyright Kevin K. Yang 2017. Licensed under the MIT License.\n * @see {@link https://github.com/kevb34ns/pinyinify}\n */\n\n/**\n * An object holding arrays of Unicode tone marks for each vowel.\n * Each tone mark can be accessed very intuitively. For example,\n * to access the tone marked version of a2, you would call\n * toneMarks[\"a\"][2].\n *\n * @type {Object}\n */\nvar toneMarks = {\n   a: [\"a\", \"\\u0101\", \"\\u00e1\", \"\\u01ce\", \"\\u00e0\", \"a\"],\n   e: [\"e\", \"\\u0113\", \"\\u00e9\", \"\\u011b\", \"\\u00e8\", \"e\"],\n   i: [\"i\", \"\\u012b\", \"\\u00ed\", \"\\u01d0\", \"\\u00ec\", \"i\"],\n   o: [\"o\", \"\\u014d\", \"\\u00f3\", \"\\u01d2\", \"\\u00f2\", \"o\"],\n   u: [\"u\", \"\\u016b\", \"\\u00fa\", \"\\u01d4\", \"\\u00f9\", \"u\"],\n   v: [\"\\u00fc\", \"\\u01d6\", \"\\u01d8\", \"\\u01da\", \"\\u01dc\", \"\\u00fc\"]\n};\n\n/**\n * @return {Boolean} whether this string is a single alphabetical letter.\n */\nString.prototype.isAlpha = function() {\n\n   return /^[A-Za-z]$/.test(this);\n}\n\n/**\n * @return {Boolean} is this string a valid pinyin vowel\n */\nString.prototype.isPinyinVowel = function() {\n\n   return /^[aeiouv\\u00fc]$/.test(this);\n}\n\n/**\n * Finds the last occurrence of a regular expression\n * pattern match in this String.\n *\n * @param  {RegExp} the pattern to match\n * @return {Number} the last match in this string\n */\nString.prototype.lastIndexOfRegex = function(regExp) {\n\n   var lastIndex = -1;\n   for (var i = 0; i < this.length; i++) {\n\n      if (regExp.test(this.charAt(i))) {\n\n         lastIndex = i;\n      }\n   }\n\n   return lastIndex;\n}\n\n/**\n * @param  {Number} index The index of the character to replace\n * @param  {String} replacement The string to insert at the index\n * @return {String} this String, with the specified replacement\n */\nString.prototype.replaceAt = function(index, replacement) {\n\n   if (index >= 0 && index < this.length && typeof replacement === \"string\") {\n\n      return this.substring(0, index) + replacement\n            + this.substring(index + 1);\n   } else {\n\n      return this;\n   }\n}\n\n/**\n * Converts this String, which must be a single pinyin word followed by a\n * tone number, to the equivalent pinyin word with tone marks.\n *\n * @return {String} this String, with the tone number removed\n *                       and tone mark inserted.\n */\nString.prototype.convertPinyin = function() {\n   // convert to lowercase\n   var str = this.toLocaleLowerCase();\n   // get index of the tone number\n   var toneNumIndex = str.search(/[1-5]/);\n   // get index of the first pinyin vowel\n   var firstVowelIndex = str.search(/[aeiouv\\u00fc]/);\n   if (str.length > 7 || toneNumIndex < 1 ||\n       toneNumIndex !== str.length - 1 ||\n       firstVowelIndex < 0) {\n      // this string is either too long to be pinyin, does not contain a \\\n      // correctly placed tone number, or has no pinyin vowels\n      console.log(\"String.prototype.convertPinyin:\" + this +\n                  \" is not a valid pinyin word.\")\n      return this;\n   }\n   /** @type {Number} from 1 to 5 */\n   var toneNum = parseInt(str[toneNumIndex]);\n   if (/[ae]/.test(str)) {\n      // str contains an 'a' or an 'e', both of which take precedence\n      var index = str.search(/[ae]/);\n      str = str.replaceAt(index, toneMarks[str.charAt(index)][toneNum]);\n   } else if (/ou/.test(str)) {\n      // str contains 'ou'. The tone always goes on the 'o'\n      var index = str.search(/ou/);\n      str = str.replaceAt(index, toneMarks[str.charAt(index)][toneNum]);\n   } else {\n      // place the tone on the last vowel\n      var index = str.lastIndexOfRegex(/[aeiouv\\u00fc]/);\n      var vowel = str.charAt(index);\n      if (vowel == \"\\u00fc\") {\n\n         vowel = \"v\";\n      }\n      str = str.replaceAt(index, toneMarks[vowel][toneNum]);\n   }\n   // strip the tone number\n   str = str.substring(0, str.length - 1);\n   return str;\n}\n\n/**\n * @param  {String} the string to convert\n * @return {String} the converted string\n */\nexport var pinyinify = function(str) {\n\n   if (typeof str !== 'string') {\n\n      return str;\n   }\n\n   var res = \"\";\n   var i = 0;\n   // parse str character by character\n   while (str.length > 0) {\n\n      var char = str.charAt(i);\n      if (char.isAlpha()) {\n         // a letter has been found\n         if (i !== 0) {\n            // remove non-letters found up to now, add to res\n            res += str.substring(0, i);\n            str = str.substring(i);\n            i = 0;\n         }\n         // get index of next tone number, if it exists\n         var toneNumIndex = str.search(/[1-5]/);\n         // get index of next whitespace, if it exists\n         var whitespaceIndex = str.search(/\\s/);\n\n         if (toneNumIndex > 0 && toneNumIndex < 7 &&\n             (whitespaceIndex < 0 || whitespaceIndex > toneNumIndex)) {\n            // there is a tone number within 6 characters from now, and no \\\n            // whitespaces between this character and the tone number\n            res += str.substring(0, toneNumIndex + 1).convertPinyin();\n            str = str.substring(toneNumIndex + 1);\n         } else if (whitespaceIndex < 0) {\n            // no valid tone numbers nor whitespace, add rest of string to res\n            res += str.substring(0);\n            str = \"\";\n         } else {\n            // whitespace found, remove everything up to and including the \\\n            // whitespace, and add to res\n            res += str.substring(0, whitespaceIndex + 1);\n            str = str.substring(whitespaceIndex + 1);\n         }\n      } else if (i >= str.length) {\n         // no more characters to parse\n         res += str.substring(0);\n         str = \"\";\n      }\n      else {\n         // increment index\n         i++;\n      }\n   }\n\n   return res;\n}\n",["63","64"],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/small_character.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/ordinal_suffix.js",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/etymology.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/components/search_history.jsx",[],"/home/robert/Documents/coding/react_hanzi_patterns/src/helpers/data.js",["65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":28,"column":1,"nodeType":"72","messageId":"73","endLine":31,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":36,"column":1,"nodeType":"72","messageId":"73","endLine":39,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":48,"column":1,"nodeType":"72","messageId":"73","endLine":60,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":67,"column":1,"nodeType":"72","messageId":"73","endLine":77,"endColumn":2},{"ruleId":"70","severity":1,"message":"71","line":86,"column":1,"nodeType":"72","messageId":"73","endLine":125,"endColumn":2},{"ruleId":"74","severity":1,"message":"75","line":110,"column":11,"nodeType":"76","messageId":"77","endLine":110,"endColumn":16},{"ruleId":"74","severity":1,"message":"75","line":114,"column":11,"nodeType":"76","messageId":"77","endLine":114,"endColumn":16},{"ruleId":"78","severity":1,"message":"79","line":116,"column":17,"nodeType":"80","messageId":"73","endLine":116,"endColumn":19},{"ruleId":"66","replacedBy":"81"},{"ruleId":"68","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":38,"column":9,"nodeType":"76","messageId":"85","endLine":38,"endColumn":20},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-redeclare","'index' is already defined.","Identifier","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["86"],["87"],"no-unused-vars","'charInHanzi' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation"]