{"version":3,"sources":["helpers/pinyinify.js","helpers/data.js","components/small_character.jsx","helpers/add_small_chars_in_str.jsx","helpers/format_definition.js","components/show_more.jsx","components/appears_in.jsx","components/etymology.jsx","helpers/ordinal_suffix.js","components/frequency.jsx","components/large_character.jsx","components/pronunciation.jsx","helpers/font_families.js","components/character_details.jsx","components/random_characters.jsx","components/search_bar.jsx","components/search_history.jsx","components/footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["toneMarks","a","e","i","o","u","v","String","prototype","isAlpha","test","this","isPinyinVowel","lastIndexOfRegex","regExp","lastIndex","length","charAt","replaceAt","index","replacement","substring","convertPinyin","str","toLocaleLowerCase","toneNumIndex","search","firstVowelIndex","console","log","toneNum","parseInt","vowel","pinyinify","res","whitespaceIndex","DATA_MEMO","FREQUENCY_MEMO","NEIGHBOURHOOD_MEMO","dict","require","hanzi","getCharInDict","char","find","element","character","sortByFrequency","chars","sort","b","getCharacterFrequency","number","getAppearsInChars","getCharactersWithComponent","Array","isArray","filter","id","arr","findIndex","first","getAppearsInWords","words","getExamples","concat","getAppearsIn","returnable","maxChars","displayedChars","maxWords","displayedWords","getEtymology","etymology","getCharWithFrequency","freq","getCharacterInFrequencyListByPosition","getFrequencyNeighbours","neighbours","push","getFrequencyDots","getFrequency","frequency","dots","getMatches","type","semantic","phonetic","pToMatch","sToMatch","pMatches","sMatches","pChars","map","sChars","unshift","fillMatches","getNeighbourhood","matches","displayedRows","displayedCols","maxRows","maxCols","getPronunciations","definitionLookup","obj","definition","fillNeighbourhood","rows","cols","sameSemantic","slice","samePhonetic","charMatchingS","charMatchingP","getNeighbourhoodChar","getPinyin","pinyin","from","Set","join","SmallCharacter","handleClick","event","props","clickHandler","showPinyin","onClick","className","classes","tabIndex","component","Component","addSmallCharInStr","split","reduce","prev","curr","formatDefinition","string","replace","ShowMore","handleChange","showMore","direction","Math","min","displayed","max","AppearsIn","charData","appearsIn","formatChars","word","pinyins","def","wordToCharacters","simplified","formatDef","formatWords","charsWithComponent","wordsWithComponent","Etymology","hint","formatSemantic","formatPhonetic","formatPhonosemantic","formatHint","row","index2","formatNeighbourhoodCell","neighbourhood","data","formatNeighbourhoodRow","etymologyType","formatContents","formatNeighbourhood","ordinalSuffix","j","k","Frequency","charToSmallChar","formatNeighbours","formatFrequency","LargeCharacter","style","fontFamily","Pronunciation","pros","pronunciations","FONT_FAMILIES","CharacterDetails","RandomCharacters","SearchBar","searchHandler","target","value","onChange","placeholder","SearchHistory","searchHistory","marginTop","marginBottom","formatSearchHistory","Footer","href","rel","App","addToSearchHistory","newSearchHistory","state","term","self","indexOf","setState","handleSearch","searchTerm","charInDict","handleClickShowPinyin","checked","dataCopy","randomCharacters","bind","start","rands","rand","ceil","random","includes","getRandomCharacters","document","getElementById","remove","htmlFor","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2778120b.chunk.js","sourcesContent":["/**\n * @file Converts pinyin tone numbers to tone marks.\n * @author Kevin K. Yang <yangkevi@usc.edu>\n * @copyright Kevin K. Yang 2017. Licensed under the MIT License.\n * @see {@link https://github.com/kevb34ns/pinyinify}\n */\n\n/**\n * An object holding arrays of Unicode tone marks for each vowel.\n * Each tone mark can be accessed very intuitively. For example,\n * to access the tone marked version of a2, you would call\n * toneMarks[\"a\"][2].\n *\n * @type {Object}\n */\nvar toneMarks = {\n   a: [\"a\", \"\\u0101\", \"\\u00e1\", \"\\u01ce\", \"\\u00e0\", \"a\"],\n   e: [\"e\", \"\\u0113\", \"\\u00e9\", \"\\u011b\", \"\\u00e8\", \"e\"],\n   i: [\"i\", \"\\u012b\", \"\\u00ed\", \"\\u01d0\", \"\\u00ec\", \"i\"],\n   o: [\"o\", \"\\u014d\", \"\\u00f3\", \"\\u01d2\", \"\\u00f2\", \"o\"],\n   u: [\"u\", \"\\u016b\", \"\\u00fa\", \"\\u01d4\", \"\\u00f9\", \"u\"],\n   v: [\"\\u00fc\", \"\\u01d6\", \"\\u01d8\", \"\\u01da\", \"\\u01dc\", \"\\u00fc\"]\n};\n\n/**\n * @return {Boolean} whether this string is a single alphabetical letter.\n */\nString.prototype.isAlpha = function() {\n\n   return /^[A-Za-z]$/.test(this);\n}\n\n/**\n * @return {Boolean} is this string a valid pinyin vowel\n */\nString.prototype.isPinyinVowel = function() {\n\n   return /^[aeiouv\\u00fc]$/.test(this);\n}\n\n/**\n * Finds the last occurrence of a regular expression\n * pattern match in this String.\n *\n * @param  {RegExp} the pattern to match\n * @return {Number} the last match in this string\n */\nString.prototype.lastIndexOfRegex = function(regExp) {\n\n   var lastIndex = -1;\n   for (var i = 0; i < this.length; i++) {\n\n      if (regExp.test(this.charAt(i))) {\n\n         lastIndex = i;\n      }\n   }\n\n   return lastIndex;\n}\n\n/**\n * @param  {Number} index The index of the character to replace\n * @param  {String} replacement The string to insert at the index\n * @return {String} this String, with the specified replacement\n */\nString.prototype.replaceAt = function(index, replacement) {\n\n   if (index >= 0 && index < this.length && typeof replacement === \"string\") {\n\n      return this.substring(0, index) + replacement\n            + this.substring(index + 1);\n   } else {\n\n      return this;\n   }\n}\n\n/**\n * Converts this String, which must be a single pinyin word followed by a\n * tone number, to the equivalent pinyin word with tone marks.\n *\n * @return {String} this String, with the tone number removed\n *                       and tone mark inserted.\n */\nString.prototype.convertPinyin = function() {\n   // convert to lowercase\n   var str = this.toLocaleLowerCase();\n   // get index of the tone number\n   var toneNumIndex = str.search(/[1-5]/);\n   // get index of the first pinyin vowel\n   var firstVowelIndex = str.search(/[aeiouv\\u00fc]/);\n   if (str.length > 7 || toneNumIndex < 1 ||\n       toneNumIndex !== str.length - 1 ||\n       firstVowelIndex < 0) {\n      // this string is either too long to be pinyin, does not contain a \\\n      // correctly placed tone number, or has no pinyin vowels\n      console.log(\"String.prototype.convertPinyin:\" + this +\n                  \" is not a valid pinyin word.\")\n      return this;\n   }\n   /** @type {Number} from 1 to 5 */\n   var toneNum = parseInt(str[toneNumIndex]);\n   if (/[ae]/.test(str)) {\n      // str contains an 'a' or an 'e', both of which take precedence\n      var index = str.search(/[ae]/);\n      str = str.replaceAt(index, toneMarks[str.charAt(index)][toneNum]);\n   } else if (/ou/.test(str)) {\n      // str contains 'ou'. The tone always goes on the 'o'\n      var index = str.search(/ou/);\n      str = str.replaceAt(index, toneMarks[str.charAt(index)][toneNum]);\n   } else {\n      // place the tone on the last vowel\n      var index = str.lastIndexOfRegex(/[aeiouv\\u00fc]/);\n      var vowel = str.charAt(index);\n      if (vowel == \"\\u00fc\") {\n\n         vowel = \"v\";\n      }\n      str = str.replaceAt(index, toneMarks[vowel][toneNum]);\n   }\n   // strip the tone number\n   str = str.substring(0, str.length - 1);\n   return str;\n}\n\n/**\n * @param  {String} the string to convert\n * @return {String} the converted string\n */\nexport var pinyinify = function(str) {\n\n   if (typeof str !== 'string') {\n\n      return str;\n   }\n\n   var res = \"\";\n   var i = 0;\n   // parse str character by character\n   while (str.length > 0) {\n\n      var char = str.charAt(i);\n      if (char.isAlpha()) {\n         // a letter has been found\n         if (i !== 0) {\n            // remove non-letters found up to now, add to res\n            res += str.substring(0, i);\n            str = str.substring(i);\n            i = 0;\n         }\n         // get index of next tone number, if it exists\n         var toneNumIndex = str.search(/[1-5]/);\n         // get index of next whitespace, if it exists\n         var whitespaceIndex = str.search(/\\s/);\n\n         if (toneNumIndex > 0 && toneNumIndex < 7 &&\n             (whitespaceIndex < 0 || whitespaceIndex > toneNumIndex)) {\n            // there is a tone number within 6 characters from now, and no \\\n            // whitespaces between this character and the tone number\n            res += str.substring(0, toneNumIndex + 1).convertPinyin();\n            str = str.substring(toneNumIndex + 1);\n         } else if (whitespaceIndex < 0) {\n            // no valid tone numbers nor whitespace, add rest of string to res\n            res += str.substring(0);\n            str = \"\";\n         } else {\n            // whitespace found, remove everything up to and including the \\\n            // whitespace, and add to res\n            res += str.substring(0, whitespaceIndex + 1);\n            str = str.substring(whitespaceIndex + 1);\n         }\n      } else if (i >= str.length) {\n         // no more characters to parse\n         res += str.substring(0);\n         str = \"\";\n      }\n      else {\n         // increment index\n         i++;\n      }\n   }\n\n   return res;\n}\n","// Used in: getPinyin()\nimport { pinyinify } from './pinyinify.js';\n\nconst DATA_MEMO = {};\nconst FREQUENCY_MEMO = {};\nconst NEIGHBOURHOOD_MEMO = {};\n\n// Using Make Me A Hanzi data from github.com/skishore/makemeahanzi\n// under the GNU Lesser General Public License\n// Used in getCharInDict(), fillMatches(), getNeighbourhoodChar()\nconst dict = require('../data/dictionary.json');\n\n// Using HanziJS from github.com/nieldlr/hanzi\n// under the MIT license\n// Used in: startHanzi(), sortByFrequency(),\n//          getAppearsInChars(), getAppearsInWords()\n//          getCharWithFrequency(), getFrequency()\n//          getCharData(), getPinyin()\nconst hanzi = require(\"hanzi\");\n\n/*\n  Returns: N/A\n  Action:  Starts Hanzi API\n  Used in: componentDidMount() in <App /> from ../App.js\n*/\nexport const startHanzi = () => { hanzi.start(); };\n\n/*\n  Params:  char - String. Single Chinese character\n  Returns: Object\n           The entry in dict (an array of objects) corresponding to the given character\n  Used in: getNeighbourhoodChar(), getCharData()\n*/\nconst getCharInDict = (char) => {\n  return dict.find(element => element.character === char);\n};\n\n/*\n  Params:  chars - Array. Each element should be a string, a single Chinese character\n  Returns: Array\n           The same array with the characters sorted from most to least frequent\n  Used in: getAppearsInChars(), fillMatches()\n*/\nconst sortByFrequency = (chars) => {\n  // hanzi.getCharacterFrequency() returns an object with various data, we only need the number here\n  return chars.sort((a, b) => {return hanzi.getCharacterFrequency(a).number - hanzi.getCharacterFrequency(b).number});\n};\n\n/*\n  Params:  chars - Array. Each element should be a string, a single Chinese character\n  Returns: Array\n           The same array with the characters sorted from most to least frequent\n  Used in: getAppearsIn()\n*/\nconst getAppearsInChars = (char) => {\n  const chars = hanzi.getCharactersWithComponent(char);\n  // If no characters are found with the given component\n  // the above function returns string \"X not found\"\n  if (!Array.isArray(chars)) { return null; }\n\n  const returnable = sortByFrequency(chars);\n  return returnable.filter((char, id, arr) => {\n      return arr.findIndex(first => first === char) === id\n    });;\n};\n\n/*\n  Params:  char - String. A single Chinese character\n  Returns: Array\n           Each element is an object with keys traditional, simplified, pinyin, definition\n           Each object is a word or expression including the given char\n  Used in: getAppearsIn()\n*/\nconst getAppearsInWords = (char) => {\n  const words = hanzi.getExamples(char);\n  // hanzi.getExamples() returns an array of three arrays of objects\n  // [[...high frequency], [...medium frequency], [...low frequency]]\n  // We want to return a single-level array\n  return words[0].concat(words[1], words[2]);\n};\n\n/*\n  Params:  char - String. A single Chinese character\n  Returns: Object\n           The object has at least two keys: chars and words (which all include the given char)\n           For non-null of the above, there are also max and displayed keys for <ShowMore />\n  Used in: getCharData()\n*/\nconst getAppearsIn = (char) => {\n  const returnable = {\n    chars: getAppearsInChars(char),\n    words: getAppearsInWords(char)\n  };\n\n  if (returnable.chars?.length) {\n    returnable.maxChars = returnable.chars.length;\n    returnable.displayedChars = 20;\n  }\n\n  if (returnable.words?.length) {\n    returnable.maxWords = returnable.words.length;\n    returnable.displayedWords = 10;\n  }\n\n  return returnable;\n};\n\n/*\n  Params:  char - Object. An entry from dict\n  Returns: Object\n           The data under the etymology key in the given argument\n  Used in: getCharData()\n*/\nconst getEtymology = (char) => {\n  if (!char) { return null; }\n  if (!char.etymology) { return null; }\n\n  return char.etymology;\n};\n\n/*\n  Params:  freq - Integer\n  Returns: String\n           A single Chinese character with position freq on a frequency list\n  Used in: getFrequencyNeighbours(), getFrequencyDots()\n*/\nexport const getCharWithFrequency = (freq) => {\n  if (FREQUENCY_MEMO[freq]) { return FREQUENCY_MEMO[freq]; }\n\n  const char = hanzi.getCharacterInFrequencyListByPosition(freq)?.character;\n  FREQUENCY_MEMO[freq] = char;\n  return char\n};\n\n/*\n  Params:  freq - Integer\n  Returns: Array\n           Each element is a string, a single Chinese character\n           Up to three characters before and after character at position freq on a frequency list\n  Used in: getFrequency()\n*/\nconst getFrequencyNeighbours = (freq) => {\n  const neighbours = [];\n  for (let i = -3; i <= 3; i+=1) {\n    const char = getCharWithFrequency(freq + i);\n    if (char) {neighbours.push(char)}\n  }\n  return neighbours;\n};\n\n/*\n  Params:  freq - Integer\n  Returns: Array\n           Two elements, either undefined or a string\n  Used in: getFrequency()\n*/\nconst getFrequencyDots = (freq) => {\n  // Used simply to tell whether there are more characters beyond\n  // those from getFrequencyNeighbours() on the list\n  return [\n    getCharWithFrequency(freq - 4),\n    getCharWithFrequency(freq + 4)\n  ];\n};\n\n/*\n  Params:  char - String. A single Chinese character\n  Returns: Object with keys:\n             frequency:  String. An integer\n             neighbours: Array (max length 7) of Strings\n             dots:       Array (length 2) of Strings\n        or null\n  Used in: getCharData()\n*/\nconst getFrequency = (char) => {\n  const freq = hanzi.getCharacterFrequency(char)?.number;\n  if (freq) {\n    return {\n      frequency: freq,\n      neighbours: getFrequencyNeighbours(parseInt(freq)),\n      dots: getFrequencyDots(parseInt(freq))\n    };\n  } else {\n    return null;\n  }\n};\n\n/*\n  Params:  char - Object. An entry from dict\n  Returns: Object with keys:\n             phonetic: Array of Strings (each a single character)\n             semantic: Array of Strings (each a single character)\n           Characters which match the argument in semantic or phonetic component\n  Used in: getMatches()\n*/\nconst fillMatches = (char) => {\n  // Get the components we will be looking for in other characters\n  const pToMatch = char.etymology.phonetic;\n  const sToMatch = char.etymology.semantic;\n\n  // Find the characters that share that component\n  // To fill the table, we also need them to have data on their other component\n  const pMatches = dict.filter(element => {\n    return element?.etymology?.phonetic === pToMatch &&\n        element?.etymology?.semantic &&\n        element?.etymology?.semantic !== sToMatch });\n  const sMatches = dict.filter(element => {\n    return element?.etymology?.semantic === sToMatch &&\n        element?.etymology?.phonetic &&\n        element?.etymology?.phonetic !== pToMatch });\n\n  // Filtering dict gives an array of objects - we only want the character Strings\n  // Then order them\n  const pChars = sortByFrequency(pMatches.map(element => element.character));\n  const sChars = sortByFrequency(sMatches.map(element => element.character));\n\n  // To have char in the top-left of the table, add it to the start of both lists\n  // In filtering we already made sure it was skipped anywhere else\n  pChars.unshift(char.character);\n  sChars.unshift(char.character);\n\n  const returnable = {\n    phonetic: pChars,\n    semantic: sChars\n  };\n\n  return returnable;\n};\n\n/*\n  Params:  charMatchingP - String. A single character with same phonetic as user's search\n           charMatchingS - String. A single character with same semantic as user's search\n  Returns: String\n           A single character\n  Used in: fillNeighbourhood()\n*/\nconst getNeighbourhoodChar = (charMatchingP, charMatchingS) => {\n  // We need to find the character with the same semantic as charMatchingP\n  // and the same phonetic as charMatchingS to fill in the table\n  // First, find them in dict and get the necessary component from that data\n  const sToMatch = getCharInDict(charMatchingP).etymology.semantic;\n  const pToMatch = getCharInDict(charMatchingS).etymology.phonetic;\n\n  if (NEIGHBOURHOOD_MEMO[sToMatch]) {\n    if (pToMatch in NEIGHBOURHOOD_MEMO[sToMatch]) {\n      return NEIGHBOURHOOD_MEMO[sToMatch][pToMatch];\n    }\n  } else {\n    NEIGHBOURHOOD_MEMO[sToMatch] = {};\n  }\n\n  const char = dict.find((element) => {\n    return element?.etymology?.semantic === sToMatch &&\n        element?.etymology?.phonetic === pToMatch\n  });\n\n  const returnable = char ? char.character : null;\n  // Whether a char exists or not, memoize to avoid having to check again later\n  NEIGHBOURHOOD_MEMO[sToMatch][pToMatch] = returnable;\n\n  return returnable;\n};\n\n/*\n  Params:  char - Object. An entry from dict\n  Returns: Array of Arrays. See fillMatches()\n        or null\n  Used in: getNeighbourhood()\n*/\nconst getMatches = (char) => {\n  if (!char) { return null; }\n  if (char?.etymology?.type !== 'pictophonetic') { return null; }\n  if (!char.etymology.semantic || !char.etymology.phonetic) { return null; }\n\n  return fillMatches(char);\n};\n\n/*\n  Params:  char - Object. An entry from dict\n  Returns: Object\n  Used in: getCharData()\n*/\nconst getNeighbourhood = (char) => {\n  const matches = getMatches(char);\n\n  const returnable = {\n      matches: matches\n    };\n\n  // We only need these for <ShowMore /> if there's anything to show\n  if (matches) {\n    returnable.displayedRows = 10;\n    returnable.displayedCols = 10;\n    returnable.maxRows = matches.semantic.length;\n    returnable.maxCols = matches.phonetic.length;\n  }\n\n  return returnable;\n};\n\n/*\n  Params:  char - Object. An entry from dict\n  Returns: Array of Objects\n  Used in: getCharData()\n*/\nconst getPronunciations = (char) => {\n  const defs = hanzi.definitionLookup(char)\n\n  return defs.filter((obj, id, arr) => {\n      return arr.findIndex(first => first.definition === obj.definition) === id\n    });\n};\n\n/*\n  Params:  char - String. A single Chinese character\n  Returns: Object\n  Used in: <App /> from ../App.js\n*/\nexport const getCharData = (char) => {\n  if (DATA_MEMO[char]) { return DATA_MEMO[char]; }\n\n  // Some of the helpers require a dict entry\n  const charInDict = getCharInDict(char);\n\n  const charData = {\n    char: char,\n    appearsIn: getAppearsIn(char),\n    etymology: getEtymology(charInDict),\n    frequency: getFrequency(char),\n    neighbourhood: getNeighbourhood(charInDict),\n    pronunciations: getPronunciations(char)\n  };\n\n  console.log(charData);\n  DATA_MEMO[char] = charData;\n\n  return charData;\n};\n\n/*\n  Params:  matches - Object with two keys\n             phonetic and semantic, both Arrays\n           rows    - Integer\n           cols    - Integer\n  Returns: Array of Arrays of Strings\n  Used in: <Etymology /> from ../components/etymology.jsx\n*/\nexport const fillNeighbourhood = (matches, rows, cols) => {\n  // For speed, we only want to retrieve as many entries as necessary\n  const sameSemantic = matches[\"semantic\"].slice(0, rows);\n  const samePhonetic = matches[\"phonetic\"].slice(0, cols);\n\n  // Map onto an array of arrays\n  // Each entry matches the relevant phonetic and semantic\n  const neighbourhood = sameSemantic.map((charMatchingS) => {\n    return samePhonetic.map((charMatchingP) => {\n      return getNeighbourhoodChar(charMatchingP, charMatchingS);\n    })\n  });\n\n  return neighbourhood;\n};\n\n/*\n  Params:  char - String. A single Chinese character\n  Returns: String\n        or \"?\"\n  Used in: <Etymology />      from ../components/etymology.jsx\n           <SmallCharacter /> from ../components/small_character.jsx\n*/\nexport const getPinyin = (char) => {\n  const pinyin = hanzi.getPinyin(char);\n  if (!pinyin) {\n    return '?';\n  } else {\n    // Strip out any repeated values\n    const uniques = Array.from(new Set(pinyin));\n    // Convert from numbers to tone marks then join into one String\n    return uniques.map((element) => pinyinify(element))\n                  .join(', ');\n  }\n};\n","import React, { Component } from 'react';\n\n// Used in: pinyin()\nimport { getPinyin } from '../helpers/data.js';\n// Used in: pinyin()\nimport { pinyinify } from '../helpers/pinyinify.js';\n\n/*\n  Returns: <SmallCharacter />\n  Props:   char         - String\n           pinyin       - String. Optional.\n           classes      - Array. Optional. Elements are String (CSS classes for the character)\n           clickHandler - Function\n           showPinyin   - Boolean. Optional.\n  Used in: <AppearsIn />       from ./appears_in.jsx\n           <Etymology />       from ./etymology.jsx\n           <Frequency />       from ./frequency.jsx\n           <SearchHistory />   from ./search_history.jsx\n           addSmallCharInStr() from ../helpers/add_small_chars_in_str.jsx\n*/\nclass SmallCharacter extends Component {\n  /*\n    Params:  event - Event\n    Returns: N/A\n    Action:  Calls clickHandler(), passing it props.char\n    Used in: onClick() in render()\n  */\n  handleClick = (event) => {\n    this.props.clickHandler(this.props.char);\n  };\n\n  /*\n    Returns: String\n             Pinyin corresponding to props.char\n    Used in: component()\n  */\n  pinyin = () => {\n    if (this.props.pinyin) {\n      // If we've been given pinyin to display\n      return pinyinify(this.props.pinyin);\n    } else {\n      // If we've been left to look it up for ourselves\n      return getPinyin(this.props.char);\n    }\n  };\n\n  /*\n    Returns: JSX\n             The character in question with pinyin as ruby annotation if props.showPinyin is true\n    Used in: component()\n  */\n  component() {\n    if (this.props.showPinyin) {\n      return (\n        <ruby onClick={this.handleClick}>\n          <span className={this.props.classes}\n              tabIndex=\"0\">{this.props.char}</span>\n          <rp>(</rp><rt>{this.pinyin()}</rt><rp>)</rp>\n        </ruby>\n      );\n    } else {\n      return (\n        <span onClick={this.handleClick}\n            className={this.props.classes}\n            tabIndex=\"0\">{this.props.char}</span>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <span className=\"small-character\">\n        {this.component()}\n      </span>\n    );\n  };\n}\n\nexport default SmallCharacter;\n","import SmallCharacter from '../components/small_character.jsx';\n\n/*\n  Params:  str          - String.   Which might contain characters to convert to <SmallCharacter />s\n           clickHandler - Function. To be passed to <SmallCharacter />\n           showPinyin   - Boolean.  To be passed to <SmallCharacter />\n           classes      - String.   CSS classes for <SmallCharacter />\n  Returns: JSX\n           The input string, with any Chinese characters as <SmallCharacter />s\n  Used in: formatDefinition() from ./format_definition.jsx\n           <Etymology />      from ../components/etymology.jsx\n*/\nexport const addSmallCharInStr = (str, clickHandler, showPinyin, classes) => {\n  // Use a regex to split the sentence with each Chinese character as string of length 1\n  // \"Here's a 例句 example sentence\" -> [\"Here's a \", \"例\", \"句\", \" example sentence\"]\n  const components = str.split(/(\\p{Script=Han})/u);\n  // For each component, if it's a character make it a <SmallCharacter />\n  // Else leave it as it is\n  const formattedComponents = components.map((component, index) => {\n    if (/\\p{Script=Han}/u.test(component)) {\n      return (\n        <SmallCharacter key={index} char={component}\n            clickHandler={clickHandler}\n            showPinyin={showPinyin}\n            classes={classes} />\n      );\n    } else {\n      return component;\n    }\n  });\n  // Reduce the array to be able to return plain JSX\n  return formattedComponents.reduce((prev, curr) => [prev, '', curr]);\n};\n","import { addSmallCharInStr } from './add_small_chars_in_str.jsx';\n\n/*\n  Params:  str          - String.   Which might contain characters to convert to <SmallCharacter />s\n           clickHandler - Function. To be passed to <SmallCharacter /> via addSmallCharInStr()\n           showPinyin   - Boolean.  To be passed to <SmallCharacter /> via addSmallCharInStr()\n           classes      - String.   CSS classes for <SmallCharacter /> via addSmallCharInStr()\n  Returns: JSX\n           The input string, with any Chinese characters as <SmallCharacter />s and \"/\" as \"; \"\n  Used in: formatDefinition() from ./format_definition.jsx\n           <Etymology />      from ../components/etymology.jsx\n*/\nexport const formatDefinition = (str, clickHandler, showPinyin, classes) => {\n  // Prefer '; ' to '/' to separate words/phrases\n  // Remove pinyin in square brackets (eg: [Qin2 Shi3 huang2])\n  const string = str.replace(/\\//g, '; ')\n                    .replace(/\\[[\\w\\s]+\\]/g,\"\");\n  return addSmallCharInStr(string, clickHandler, showPinyin, \"\");\n};\n","import React, { Component } from 'react';\n\n/*\n  Returns: <ShowMore />\n  Props:   showMore  - Function\n           direction - String\n           max       - Integer\n           displayed - Integer\n  Used in: <AppearsIn /> from ./appears_in.jsx\n           <Etymology /> from ./etymology.jsx\n*/\nclass ShowMore extends Component {\n  /*\n    Params:  event - Event\n    Returns: N/A\n    Action:  Calls showMore(), passing it props.direction\n    Used in: onClick() in render()\n  */\n  handleChange = (event) => {\n    this.props.showMore(this.props.direction);\n  };\n\n  /*\n    Returns: JSX\n             A sentence saying how many of the rows/columns/words/characters are shown\n               and how many there are in total\n             A link to increase how many are shown\n  */\n  render() {\n    // We use Math.min so we can just keep adding to displayed\n    // without worrying about comparing it with max and capping it\n    // props.direction is a full word in plural (\"column\", etc) so we can interpolate it straight here\n    return (\n      <div className=\"show-more light-grey-text\">\n        {\n          `Showing\n          ${Math.min(this.props.displayed, this.props.max)}/${this.props.max}\n          ${this.props.direction}. `\n        }\n        {\n          this.props.displayed < this.props.max &&\n          <span className=\"underlined\"\n            onClick={this.handleChange}\n            tabIndex=\"0\">Show more</span>\n        }\n      </div>\n    );\n  }\n}\n\nexport default ShowMore;\n","import React, { Component } from 'react';\n\n// Used in: formatDef()\nimport { formatDefinition } from '../helpers/format_definition.js';\n\n// Used in: charsWithComponent(), wordsWithComponent()\nimport ShowMore from './show_more.jsx';\n// Used in: formatChars(), wordToCharacters()\nimport SmallCharacter from './small_character.jsx';\n\n/*\n  Returns: <AppearsIn />\n  Props:   charData     - Object:\n             char           String\n             appearsIn      Object {chars, displayedChars, maxChars, words, displayedWords, maxWords}\n           clickHandler - Function. To pass to <SmallCharacter /> directly and via formatDefinition()\n           showPinyin   - Boolean. To pass to <SmallCharacter /> directly and via formatDefinition()\n           showMore     - Function. With directions characters and words\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass AppearsIn extends Component {\n  /*\n    Params:  chars - Array of characters to format\n    Returns: JSX\n             A <SmallCharacter /> for each of chars\n    Used in: charsWithComponent()\n  */\n  formatChars(chars) {\n    return chars.map((char, index) => {\n        return (\n          <SmallCharacter key={index} char={char}\n              clickHandler={this.props.clickHandler}\n              showPinyin={this.props.showPinyin}\n              classes=\"char-mid margin-l-r\" />\n        )\n      }).reduce((prev, curr) => [prev, ' ', curr]);\n  };\n\n  /*\n    Returns: JSX\n             A <SmallCharacter /> for every appearsIn.char plus a <ShowMore />\n          or \"None found\"\n    Used in: render()\n  */\n  charsWithComponent() {\n    let chars = this.props.charData.appearsIn.chars;\n    if (chars?.length) {\n      // We don't always want to display all the characters\n      chars = chars.slice(0, this.props.charData.appearsIn.displayedChars);\n      // <ShowMore /> in here so it only appears when relevant\n      return (\n        <div>\n          {this.formatChars(chars)}\n          <ShowMore direction=\"characters\"\n            showMore={this.props.showMore}\n            displayed={this.props.charData.appearsIn.displayedChars}\n            max={this.props.charData.appearsIn.maxChars} />\n        </div>\n      );\n    } else {\n      return (<p>None found</p>);\n    }\n  };\n\n  /*\n    Params:  word - String of characters\n             pinyin - String of space-separated pinyin with numbers\n    Returns: JSX\n             A <SmallCharacter /> for each char of word\n    Used in: formatWords()\n  */\n  wordToCharacters(word, pinyin) {\n    // For <SmallCharacter /> we need the pinyin for each char\n    // So split the word's pinyin into individual characters\n    const pinyins = pinyin.split(' ')\n    // Destructure the word string to get array of chars\n    // Then map that to <SmallCharacter />s\n    return [...word].map((char, index) => {\n        return (\n          <SmallCharacter key={index} char={char}\n              clickHandler={this.props.clickHandler}\n              showPinyin={this.props.showPinyin} pinyin={pinyins[index]}\n              classes=\"char-mid\" />\n        )})\n        .reduce((prev, curr) => [prev, '', curr]);\n  };\n\n  /*\n    Params:  def - String, a definition possibly containing characters\n    Returns: JSX\n             def with characters as <SmallCharacter />s and each '/' turned to '; '\n    Used in: formatWords()\n  */\n  formatDef(def) {\n    // formatDefinition() is imported from ../helpers/format_definition.js\n    return formatDefinition(def, this.props.clickHandler, this.props.showPinyin, \"\");\n  };\n\n  /*\n    Params:  words - An array of objects\n    Returns: JSX\n             A div for each word containing the word as <SmallCharacter />s and its definition\n    Used in: wordsWithComponent()\n  */\n  formatWords(words) {\n    return words.map((word, index) => {\n        return (\n          <div key={index}>\n            <span className=\"margin-l-r\">{this.wordToCharacters(word.simplified, word.pinyin)}</span>\n            <span className=\"italics grey-text\">{this.formatDef(word.definition)}</span>\n          </div>\n        )})\n        .reduce((prev, curr) => [prev, ' ', curr]);\n  }\n\n  /*\n    Returns: JSX\n             The result of formatWords() plus a <ShowMore />\n          or \"None found\"\n    Used in: render()\n  */\n  wordsWithComponent() {\n    let words = this.props.charData.appearsIn.words;\n    if (words?.length) {\n      // We don't always want to display all the words\n      words = words.slice(0, this.props.charData.appearsIn.displayedWords);\n      // <ShowMore /> in here so it only appears when relevant\n      return (\n        <div>\n          {this.formatWords(words)}\n          <ShowMore direction=\"words\"\n            showMore={this.props.showMore}\n            displayed={this.props.charData.appearsIn.displayedWords}\n            max={this.props.charData.appearsIn.maxWords} />\n        </div>\n      );\n    } else {\n      return (<p>None found</p>);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <section>\n          <h3>Characters which contain {this.props.charData.char}</h3>\n          {this.charsWithComponent()}\n        </section>\n        <section>\n          <h3>Words/expressions which contain {this.props.charData.char}</h3>\n          {this.wordsWithComponent()}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default AppearsIn;\n","import React, { Component } from 'react';\n\n// Used in: showMore()\nimport ShowMore from './show_more.jsx';\n// Used in: formatSemantic(), formatPhonetic(), formatNeighbourhoodCell()\nimport SmallCharacter from './small_character.jsx';\n\n// Used in: formatHint()\nimport { addSmallCharInStr } from '../helpers/add_small_chars_in_str.jsx';\n// Used in: formatPhonetic()\n//          formatNeighbourhood()\nimport { getPinyin, fillNeighbourhood } from '../helpers/data.js';\n\n/*\n  Returns: <Etymology />\n  Props:   charData     - Object:\n             etymology      {type, hint, semantic, phonetic}\n             neighbourhood  {matches, displayedRows, maxRows, displayedCols, maxCols}\n           clickHandler - Function\n           showPinyin   - Boolean\n           showMore     - Function. Used with directions rows and columns\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass Etymology extends Component {\n  /*\n    Returns: String\n             To be used as a section heading\n    Used in: render()\n  */\n  etymologyType() {\n    if (!this.props.charData.etymology) { return 'Etymology'; }\n\n    const type = this.props.charData.etymology.type;\n    if (type === 'pictophonetic') {\n      // I prefer the term phonosemantic over the dataset's pictophonetic\n      return 'Etymology: Phonosemantic Compound';\n    } else if (type === 'ideographic') {\n      return 'Etymology: Ideographic';\n    } else if (type === 'pictographic') {\n      return 'Etymology: Pictographic';\n    } else {\n      return 'Etymology';\n    }\n  };\n\n  /*\n    Params:  hint - String explaining the etymology, possibly containing characters\n             Note: 'hint' is the term used in ../data/dictionary.json\n    Returns: JSX\n             The result of addSmallCharInStr() - the hint with characters as <SmallCharacter />s\n    Used in: etymologyContents()\n  */\n  formatHint(hint) {\n    // The <SmallCharacter />s returned are given .char-mid but no margin, being in the middle of sentences\n    return addSmallCharInStr(hint, this.props.clickHandler, this.props.showPinyin, \"char-mid\");\n  };\n\n  /*\n    Params:  semantic - String, a single character\n             hint - String explaining the etymology, possibly containing characters\n             Note: 'hint' is the term used in ../data/dictionary.json\n    Returns: JSX\n             The semantic as a <SmallCharacter /> followed by the hint in brackets\n          or \"?\"\n    Used in: formatPhonosemantic()\n  */\n  formatSemantic(semantic, hint) {\n    if (semantic) {\n      return (\n        <span>\n          <SmallCharacter char={semantic}\n              clickHandler={this.props.clickHandler}\n              classes=\"char-mid margin-l-r\" /> ({hint})\n        </span>\n        )\n    } else {\n      return ( <span className=\"char-mid\">?</span>)\n    }\n  };\n\n  /*\n    Params:  phonetic - String, a single character\n    Returns: JSX\n             The phonetic as a <SmallCharacter /> followed by its pinyin in brackets\n          or \"?\"\n    Used in: formatPhonosemantic()\n  */\n  formatPhonetic(phonetic) {\n    if (phonetic) {\n      return (\n        <span>\n          <SmallCharacter char={phonetic}\n              clickHandler={this.props.clickHandler}\n              classes=\"char-mid margin-l-r\" /> ({getPinyin(phonetic)})\n        </span>\n        )\n    } else {\n      return ( <span className=\"char-mid\">?</span>)\n    }\n  };\n\n  /*\n    Params:  etymology - Object\n    Returns: JSX\n             The details of the etymology formatted with <SmallCharacter />s\n    Used in: formatContents()\n  */\n  formatPhonosemantic(etymology) {\n    return (\n      <div>\n        <div>\n          {this.formatSemantic(etymology.semantic, etymology.hint)}\n          +\n          {this.formatPhonetic(etymology.phonetic)}\n        </div>\n        <p className=\"light-grey-text\">NB: The pronunciations given are from modern Mandarin, not those at the time the character was created.</p>\n      </div>\n    );\n  };\n\n  /*\n    Returns: JSX\n             The details of the etymology formatted with <SmallCharacter />s\n          or \"No data found\"\n    Used in: render()\n  */\n  formatContents() {\n    const etymology = this.props.charData.etymology;\n    if (!etymology) { return `No data found`; }\n\n    if (etymology.type === 'pictophonetic') {\n      return this.formatPhonosemantic(etymology);\n    } else if (etymology.type === 'ideographic' || etymology.type === 'pictographic') {\n      return this.formatHint(etymology.hint);\n    } else {\n      return '';\n    }\n  };\n\n  /*\n    Params:  char - String, a single character\n    Returns: JSX\n             The char as a <SmallCharacter />\n          or ''\n    Used in: formatNeighbourhoodRow()\n  */\n  formatNeighbourhoodCell(char) {\n    if (char) {\n      return (\n        <SmallCharacter char={char} clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin}\n            classes=\"char-mid margin-l-r\"  />\n      );\n    } else {\n      return '';\n    }\n  };\n\n  /*\n    Params:  row - Array of characters\n             index - Integer, the index of the row in the Neighbourhood\n    Returns: JSX\n             A <tr>, populated with <SmallCharacter />s\n          or ''\n    Used in: formatNeighbourhood()\n  */\n  formatNeighbourhoodRow(row, index) {\n    return (\n      <tr key={index}>\n        {row.map((char, index2) => {return <td key={index + ',' + index2}>{this.formatNeighbourhoodCell(char)}</td>})}\n      </tr>\n    );\n  };\n\n  /*\n    Returns: JSX\n             Two <ShowMore />, one for Neighbourhood rows, one for columns\n    Used in: formatNeighbourhood()\n  */\n  showMore() {\n    return (\n      <div>\n        <ShowMore direction=\"rows\"\n            showMore={this.props.showMore}\n            displayed={this.props.charData.neighbourhood.displayedRows}\n            max={this.props.charData.neighbourhood.maxRows} />\n        <ShowMore direction=\"columns\"\n            showMore={this.props.showMore}\n            displayed={this.props.charData.neighbourhood.displayedCols}\n            max={this.props.charData.neighbourhood.maxCols} />\n      </div>\n    );\n  };\n\n  /*\n    Returns: JSX\n             <table> containing a character Neighbourhood\n          or ''\n    Used in: render()\n  */\n  formatNeighbourhood() {\n    const data = this.props.charData.neighbourhood;\n    if (!data.matches) {\n      return ('')\n    } else {\n      const neighbourhood = fillNeighbourhood(data.matches,\n          data.displayedRows,\n          data.displayedCols);\n      return (\n        <div>\n          <table>\n            <tbody>\n              {neighbourhood.map((row, index) => this.formatNeighbourhoodRow(row, index))}\n            </tbody>\n          </table>\n          {this.showMore()}\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <section>\n        <h3>{this.etymologyType()}</h3>\n        {this.formatContents()}\n        {this.formatNeighbourhood()}\n      </section>\n    );\n  };\n};\n\nexport default Etymology;\n","// From: https://stackoverflow.com/questions/13627308/add-st-nd-rd-and-th-ordinal-suffix-to-a-number\n\n/*\n  Params:  i - Integer.\n  Returns: String\n           i with the correct suffix as an ordinal number\n  Used in: <Frequency /> from ../components/frequency.jsx\n*/\nexport const ordinalSuffix = i => {\n    const j = i % 10,\n          k = i % 100;\n    if (j === 1 && k !== 11) {\n        return i + \"st\";\n    }\n    if (j === 2 && k !== 12) {\n        return i + \"nd\";\n    }\n    if (j === 3 && k !== 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n};\n","import React, { Component } from 'react';\n\n// Used in: formatFrequency()\nimport { ordinalSuffix } from '../helpers/ordinal_suffix.js';\n\n// Used in: formatNeighbours()\nimport SmallCharacter from './small_character.jsx';\n\n/*\n  Returns: <Frequency />\n  Props:   charData     - Object:\n             frequency      {dots, frequency, neighbours}\n           clickHandler - Function\n           showPinyin   - Boolean\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass Frequency extends Component {\n  /*\n    Params:  char  - String\n             index - Integer\n    Returns: JSX\n             A <SmallCharacter /> for the given char\n               style depending on whether it matches props.charData.char or not\n    Used in: formatNeighbours()\n  */\n  charToSmallChar(char, index) {\n    if (char === this.props.charData.char) {\n      return (\n        <SmallCharacter key={index} char={char}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin}\n            classes=\"char-mid margin-l-r\" />\n      )\n    } else {\n      return (\n        <SmallCharacter key={index} char={char}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin}\n            classes=\"char-mid margin-l-r\" />\n      )\n    }\n  }\n\n  /*\n    Returns: JSX\n             A <SmallCharacter /> for each character of neighbouring frequency\n    Used in: formatFrequency()\n  */\n  formatNeighbours() {\n    const dots = this.props.charData.frequency.dots;\n    const neighbours = this.props.charData.frequency.neighbours;\n    return (\n      <div>\n        {dots[0] && \"⋯⋯\" /*Dots at the start of the list if more characters not shown*/}\n        {neighbours.map((char, index) =>\n            {return this.charToSmallChar(char, index)}\n          )}\n        {dots[1] && \"⋯⋯\" /*Dots at the end of the list if more characters not shown*/}\n      </div>\n    );\n  };\n\n  /*\n    Returns: JSX\n             The frequency as an ordinal number in a sentence\n                then a <SmallCharacter /> for each frequency neighbour\n          or 'No frequency data found'\n    Used in: render()\n  */\n  formatFrequency() {\n    const freq = this.props.charData.frequency;\n    if (freq) {\n      return (\n        <div>\n          {this.formatNeighbours()}\n          <div>{ordinalSuffix(freq.frequency)} most common</div>\n        </div>\n      );\n    } else {\n      return `No frequency data found`;\n    }\n  };\n\n  render() {\n    return (\n      <section>\n        <h3>Frequency</h3>\n        {this.formatFrequency()}\n      </section>\n    );\n  }\n}\n\nexport default Frequency;\n","import React, { Component } from 'react';\n\n/*\n  Returns: <LargeCharacter />\n  Props:   char  - String, a single character\n           style - String, a CSS font-family definition\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass LargeCharacter extends Component {\n  render() {\n    return (\n      <span className=\"char-large\" style={{fontFamily: this.props.style}}>{this.props.char}</span>\n    );\n  }\n}\n\nexport default LargeCharacter;\n","import React, { Component } from 'react';\n\n// Used in: formatDef()\nimport { formatDefinition } from '../helpers/format_definition.js';\n// Used in: pronunciations()\nimport { pinyinify } from '../helpers/pinyinify.js';\n\n/*\n  Returns: <Pronunciation />\n  Props:   charData     - Object:\n             pronunciations [{pinyin, definition}]\n           clickHandler - Function\n           showPinyin   - Boolean\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass Pronunciation extends Component {\n  /*\n    Params:  def - String, a definition possibly containing characters\n    Returns: JSX\n             def with characters as <SmallCharacter />s and each '/' turned to '; '\n    Used in: pronunciations()\n  */\n  formatDef(def) {\n    return formatDefinition(def, this.props.clickHandler, this.props.showPinyin, \"\");\n  };\n\n  /*\n    Returns: JSX\n             An entry for each element of props.charData.pronunciations with:\n               Relevant pinyin with numbers converted to tone marks\n               Relevant definition including <SmallCharacter />s where applicable\n          or \"No pronunciations found\"\n    Used in: formatWords()\n  */\n  pronunciations() {\n    const pros = this.props.charData.pronunciations;\n    if (pros) {\n      return (\n        pros.map((element, index) => {\n              return (\n                  <p key={index}>\n                    <span className=\"bold\">{pinyinify(element.pinyin)}</span>\n                    &nbsp;\n                    <span className=\"italics grey-text\">{this.formatDef(element.definition)}</span>\n                  </p>\n                )\n            })\n      )\n    } else {\n      return `No pronunciations found`;\n    }\n  };\n\n  render() {\n    return (\n      <section>\n        {this.pronunciations()}\n      </section>\n    );\n  }\n}\n\nexport default Pronunciation;\n","export const FONT_FAMILIES = {\n  'heiti': \"STHeiti, 华文黑体, 'Microsoft YaHei', 微软雅黑, SimHei, 黑体, sans-serif\",\n  'songti': \"SimSun, 宋体, 'Zhongyi Songti', 中易宋体, serif\",\n  'xing': \"'Zhi Mang Xing', cursive\",\n  'liu': \"'Liu Jian Mao Cao', cursive\"\n};\n","import React, { Component } from 'react';\n\n// All used in: render()\nimport AppearsIn from './appears_in.jsx';\nimport Etymology from './etymology.jsx';\nimport Frequency from './frequency.jsx';\nimport LargeCharacter from './large_character.jsx';\nimport Pronunciation from './pronunciation.jsx';\n\n// Used in: render()\nimport { FONT_FAMILIES } from '../helpers/font_families.js';\n\n/*\n  Returns: <CharacterDetails />\n  Props: charData     - Object\n         clickHandler - Function\n         showPinyin   - Boolean\n         showMore     - Function\n  Used in: <App /> from ../App.js\n*/\nclass CharacterDetails extends Component {\n  render() {\n    return (\n      <article>\n        {['heiti', 'songti', 'xing', 'liu'].map((style, index) => {\n          return (<LargeCharacter key={index} style={FONT_FAMILIES[style]} char={this.props.charData.char} />)}\n        )}\n\n        <Pronunciation charData={this.props.charData}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin} />\n\n        <Frequency charData={this.props.charData}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin} />\n\n        <Etymology charData={this.props.charData}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin}\n            showMore={this.props.showMore} />\n\n        <AppearsIn charData={this.props.charData}\n            clickHandler={this.props.clickHandler}\n            showPinyin={this.props.showPinyin}\n            showMore={this.props.showMore} />\n      </article>\n    );\n  }\n}\n\nexport default CharacterDetails;\n","import React, { Component } from 'react';\n\n// Used in: getRandomCharacters()\nimport { getCharWithFrequency } from '../helpers/data.js'\n\n// Used in: formatNeighbours()\nimport SmallCharacter from './small_character.jsx';\n\n/*\n  Returns: <RandomCharacters />\n  Props:   clickHandler - Function\n           showPinyin   - Boolean\n  Used in: <App /> from ./app.jsx\n*/\nclass RandomCharacters extends Component {\n  /*\n    Params:  chars   - Array of Integers.\n             classes - String. CSS classes\n    Returns: JSX\n             A <SmallCharacter /> for each of chars\n    Used in: getRandomCharacters()\n  */\n  formatChars(chars, classes) {\n    // First find the character with each frequency\n    // Then make the <SmallCharacter />\n    return chars.map(char => getCharWithFrequency(char))\n                .map((char, index) => {\n        return (\n          <SmallCharacter key={index} char={char}\n              clickHandler={this.props.clickHandler}\n              showPinyin={this.props.showPinyin}\n              classes={classes} />\n        )\n      }).reduce((prev, curr) => [prev, ' ', curr]);\n  };\n\n\n  render() {\n    return (\n      <div>\n        <p>Or click on one of the random characters below:</p>\n        {this.formatChars(this.props.chars.slice(0, 5), \"char-mid margin-l-r\")}\n        <br />\n        {this.formatChars(this.props.chars.slice(5, 10), \"char-mid margin-l-r\")}\n        <br />\n        {this.formatChars(this.props.chars.slice(10), \"char-mid margin-l-r\")}\n      </div>\n    );\n  }\n}\n\nexport default RandomCharacters;\n","import React, { Component } from 'react';\n\n/*\n  Returns: <SearchBar />\n  Props: searchHandler - Function\n  Used in: <App /> from ../App.js\n*/\nclass SearchBar extends Component {\n  /*\n    Params:  event - Event\n    Returns: N/A\n    Action:  Calls searchHandler(), passing it the input's value\n    Used in: onChange() in render()\n  */\n  handleChange = (event) => {\n    this.props.searchHandler(event.target.value);\n  };\n\n  render() {\n    // We want to update every time the input's value changes\n    return (\n      <input type=\"text\" className=\"search-bar\"\n          onChange={this.handleChange} placeholder=\"Enter any hanzi\" />\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from 'react';\n\n// Used in: render()\nimport SmallCharacter from './small_character.jsx';\n\n/*\n  Returns: <SearchHistory />\n  Props:   searchHistory - Array. Elements are String (characters)\n           clickHandler  - Function\n  Used in: <CharacterDetails /> from ./character_details.jsx\n*/\nclass SearchHistory extends Component {\n  /*\n    Params:  chars   - Array. Characters to format\n             classes - String. CSS classes\n    Returns: JSX\n             A <SmallCharacter /> for each of chars\n    Used in: formatSearchHistory()\n  */\n  formatChars(chars, classes) {\n    if (chars.length) {\n      return chars.map((char, index) => {\n          return (\n            <SmallCharacter key={index} char={char}\n                clickHandler={this.props.clickHandler}\n                classes={classes} />\n          )\n        }).reduce((prev, curr) => [prev, ' ', curr]);\n    } else {\n      return \"\"\n    }\n  };\n\n  /*\n    Returns: JSX\n             props.searchHistory displayed nicely if non-empty\n    Used in: render()\n  */\n  formatSearchHistory() {\n    if (this.props.searchHistory.length) {\n      return (\n        <div>\n          {this.formatChars(['搜', '索', '记','录'], \"light-grey-text char-mid\")}\n          <span className=\"char-mid\" style={{marginTop:\"0.2em\", marginBottom:\"0.2em\"}}>‧</span>\n          {this.formatChars(this.props.searchHistory, \"char-mid\")}\n        </div>\n      )\n    } else {\n      return (\"\")\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"search-history\">\n        {this.formatSearchHistory()}\n      </div>\n    );\n  }\n}\n\nexport default SearchHistory;\n","import React, { Component } from 'react';\n\n/*\n  Returns: <Footer />\n  Used in: <App /> from ../App.js\n*/\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <small>A ReactJS app by Rob Owen King. You can find the code and even comment or contribute on <a href=\"https://github.com/RobOwenKing/react_hanzi_patterns\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.</small>\n        <small>Here's my <a href=\"http://www.robowenking.com/\" target=\"_blank\" rel=\"noopener noreferrer\">website</a>. I'm also on <a href=\"https://twitter.com/RobOwenKing\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>.</small>\n        <small>Built using data from <a href=\"https://github.com/skishore/makemeahanzi\" target=\"_blank\" rel=\"noopener noreferrer\">Make Me A Hanzi</a> under the <a href=\"https://github.com/skishore/makemeahanzi/blob/master/LGPL\" target=\"_blank\" rel=\"noopener noreferrer\">GNU Lesser General Public License</a>.</small>\n        <small>Built using data from <a href=\"https://github.com/nieldlr/hanzi\" target=\"_blank\" rel=\"noopener noreferrer\">HanziJS</a> under the <a href=\"https://github.com/nieldlr/hanzi/blob/master/LICENSE.txt\" target=\"_blank\" rel=\"noopener noreferrer\">MIT License</a>.</small>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import './App.css';\n\nimport { Component } from 'react';\n\n// All used in: render()\nimport CharacterDetails from './components/character_details.jsx';\nimport RandomCharacters from './components/random_characters.jsx';\nimport SearchBar from './components/search_bar.jsx';\nimport SearchHistory from './components/search_history.jsx';\nimport Footer from './components/footer.jsx';\n\n// Used in: componentDidMount(), handleSearch()\nimport * as data from './helpers/data.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomCharacters: [],\n      searchHistory: [],\n      showPinyin: false\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n\n    // Needed to use hanzi library\n    data.startHanzi();\n  };\n\n  /*\n    Returns: Array of Strings\n             15 random hanzi\n    Used in: componentDidMount()\n  */\n  getRandomCharacters() {\n    const rands = [];\n\n    while (rands.length < 15) {\n      const rand = Math.ceil((Math.random() ** 2) * 7500);\n      if (!rands.includes(rand)) { rands.push(rand); }\n    }\n\n    this.setState({ randomCharacters: rands.sort((a, b) => a - b) });\n  }\n\n  componentDidMount() {\n    this.getRandomCharacters();\n\n    const placeholder = document.getElementById('placeholder');\n    if (placeholder) { placeholder.remove(); }\n  }\n\n  /*\n    Params:  char - String\n    Returns: N/A\n    Action:  Adds char to state.searchHistory\n    Used in: handleSearch()\n  */\n  addToSearchHistory = (char) => {\n    // We want the new char at the start of the search history\n    // And duplicates (if any) removed\n    // So add char to the start using destructuring\n    // Then filter out duplicates\n    const newSearchHistory = [char, ...this.state.searchHistory]\n        .filter((term, index, self) => { return self.indexOf(term) === index });\n    this.setState({ searchHistory: newSearchHistory });\n  }\n\n  /*\n    Params:  searchTerm - String\n    Returns: N/A\n    Action:  When the user searches for/clicks on a single Chinese character\n               Adds that character to state.searchHistory\n               Updates state.charData so data for selected character is displayed\n    Used in: <SearchBar /> from ./components/search_bar.jsx via render()\n               as props.searchHandler\n             <SmallCharacter /> from ./components/small_character.jsx via <CharacterDetails /> in render()\n               as props.clickHandler\n  */\n  handleSearch = (searchTerm) => {\n    // If the searchTerm is a single Chinese character\n    if (searchTerm.length === 1 && /\\p{Script=Han}/u.test(searchTerm)) {\n      this.addToSearchHistory(searchTerm);\n\n      const charData = data.getCharData(searchTerm);\n      if (charData) {\n        this.setState({ charData: charData });\n      }\n    }\n  };\n\n  /*\n    Params:  event - Event\n    Returns: N/A\n    Action:  Updates the boolean value of state.showPinyin to match event.target.checked\n    Used in: input#show-pinyin in render()\n  */\n  handleClickShowPinyin = (event) => {\n    this.setState({ showPinyin: event.target.checked });\n  }\n\n  /*\n    Params:  direction - String. One of rows, columns, characters, words\n    Returns: N/A\n    Action:  When the user clicks on a <ShowMore /> link\n               Increment how many of that direction are displayed\n    Used in: <ShowMore /> from ./components/show_more.jsx via render()\n               via <AppearsIn /> and <Etymology />\n  */\n  showMore = (direction) => {\n    const dataCopy = { ...this.state.charData };\n\n    if (direction === \"rows\") {\n      dataCopy.neighbourhood.displayedRows += 10;\n    } else if (direction === \"columns\") {\n      dataCopy.neighbourhood.displayedCols += 10;\n    } else if (direction === \"words\") {\n      dataCopy.appearsIn.displayedWords += 10;\n    } else if (direction === \"characters\") {\n      dataCopy.appearsIn.displayedChars += 20;\n    }\n\n    this.setState({ charData: dataCopy });\n  }\n\n  /*\n    Returns: N/A\n    Action:  Sets charData to null when user clicks on h1 title\n               to \"return to home sceen\"\n    Used in: render()\n  */\n  handleClick() {\n    this.setState({ charData: null });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <header>\n            <h1 onClick={this.handleClick} tabIndex=\"0\">Patterns in the Hanzi</h1>\n            <SearchBar searchHandler={this.handleSearch} />\n            <p>\n              <label htmlFor=\"show-pinyin\" className=\"light-grey-text\">Show pinyin? </label>\n              <input type=\"checkbox\" id=\"show-pinyin\" name=\"show-pinyin\"\n                  onClick={this.handleClickShowPinyin} />\n            </p>\n          </header>\n          {!this.state.charData &&\n              this.state.randomCharacters.length > 0 &&\n              <RandomCharacters\n                  chars={this.state.randomCharacters}\n                  clickHandler={this.handleSearch}\n                  showPinyin={this.state.showPinyin}/>}\n          {this.state.charData &&\n              <CharacterDetails\n                  charData={this.state.charData}\n                  clickHandler={this.handleSearch}\n                  showPinyin={this.state.showPinyin}\n                  showMore={this.showMore} />}\n        </div>\n        <nav>\n          <SearchHistory searchHistory={this.state.searchHistory} clickHandler={this.handleSearch} />\n        </nav>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}